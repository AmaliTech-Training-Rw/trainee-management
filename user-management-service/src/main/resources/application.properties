spring.application.name=user-management-service
server.port=8083
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://localhost:5432/user-management-service
spring.datasource.username=postgres
spring.datasource.password=newPassword123
spring.jpa.hibernate.ddl-auto=update
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/
springdoc.api-docs.path=/users/v3/api-docs
springdoc.swagger-ui.path=/users/swagger-ui.html
openapi.service.title=user-management-service doc
openapi.service.version=1.0.0
openapi.service.url=http://localhost:8093
api.gateway.url=http://localhost:8093
## OAuth 2 configuration
#spring.security.oauth2.client.registration.google.client-id=1063753584185-91ruf47t0ck15207pa3h9idmmb853gsq.apps.googleusercontent.com
#spring.security.oauth2.client.registration.google.client-secret=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
#spring.security.oauth2.client.registration.google.scope=profile,email
#spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8093/users/login/oauth2/callback
#spring.security.oauth2.client.provider.google.issuer-uri=https://accounts.google.com
#spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/auth
#spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token;USER-INFO-URI=https://www.googleapis.com/oauth2/v3/userinfo
#spring.security.oauth2.client.provider.google.user-info-uri=https://accounts.google.com/o/oauth2/auth
# JWT
security.jwt.token.secret-key=fD/t0ZQGHI+QYEGZJW2Uw1BjJ6TnZr9WTgIPuNhHCeI=
security.jwt.token.expiration=3600000

email.service.url=http://localhost:8093/email
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=true
logging.level.org.springframework.security=DEBUG
kafka.topic.user-created=user-created
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=email-service
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
kafka.topic.password-reset=password-reset-topic
kafka.topic.user-events=user-events